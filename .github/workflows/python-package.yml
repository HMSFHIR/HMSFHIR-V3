# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install additional dependencies for Django
        python -m pip install django psycopg2-binary
    
    - name: Set environment variables
      run: |
        echo "CI=true" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions-$(openssl rand -hex 32)" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "STATIC_ROOT=/tmp/static" >> $GITHUB_ENV
        echo "MEDIA_ROOT=/tmp/media" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
    
    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 2; done'
        echo "PostgreSQL is ready!"
    
    - name: Create directories for static and media files
      run: |
        mkdir -p /tmp/static
        mkdir -p /tmp/media
    
    - name: Lint with flake8 (syntax errors only)
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run Django system checks
      run: |
        python manage.py check --settings=core.settings
    
    - name: Run Django migrations
      run: |
        python manage.py migrate --settings=core.settings
    
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput --settings=core.settings
    
    - name: Run comprehensive linting
      run: |
        # Show all flake8 warnings (but don't fail the build)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest --tb=short
      continue-on-error: true
    
    - name: Test Django server startup
      run: |
        # Start Django server in background
        timeout 30s python manage.py runserver 0.0.0.0:8000 --settings=core.settings &
        SERVER_PID=$!
        
        # Wait for server to start
        echo "Waiting for Django server to start..."
        sleep 10
        
        # Test if server is responding
        if curl -f http://localhost:8000/ 2>/dev/null || curl -f http://localhost:8000/admin/ 2>/dev/null; then
          echo "✅ Django server is responding!"
        else
          echo "ℹ️ Server started but no accessible endpoints found (this may be normal)"
        fi
        
        # Check if server process is running
        if ps -p $SERVER_PID > /dev/null 2>&1; then
          echo "✅ Django server process is running!"
          kill $SERVER_PID 2>/dev/null || true
        else
          echo "❌ Django server process not found"
          exit 1
        fi
      timeout-minutes: 2
